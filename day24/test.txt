use std::{fs::File, io::{BufReader, BufRead}, vec};
use std::cmp;
use std::collections::HashMap;
use std::collections::HashSet;

fn nextphase(board:&Vec<Vec<char>>,blizzard:&HashSet<(usize,usize,i32)>)->(Vec<Vec<char>>,HashSet<(usize,usize,i32)>){
    let mut newblizzard=HashSet::new();
    let mut newboard=vec![vec!['.';board[0].len()];board.len()];
    let height=board.len();
    let width=board[0].len();
    for (x,y,dir) in blizzard{
        let mut nx=0;
        let mut ny=0;
        match dir{
            0=>(nx,ny)=(*x+1,*y),
            1=>(nx,ny)=(*x,*y+1),
            2=>(nx,ny)=(*x-1,*y),
            3=>(nx,ny)=(*x,*y-1),
            _=>()
        }
        if nx==width-1{
            newblizzard.insert((1,ny,*dir));
        }
        else if nx==0{
            newblizzard.insert((width-2,ny,*dir));
        }
        else if ny==height-1{
            newblizzard.insert((nx,1,*dir));
        }
        else if ny==0{
            newblizzard.insert((nx,height-2,*dir));
        }
        else{
            newblizzard.insert((nx,ny,*dir));
        }
    }
    for y in 0..board.len(){
        for x in 0..board[0].len(){
            if board[y][x]=='#'{
                newboard[y][x]='#';
            }
            else{
                if newblizzard.contains(&(x,y,0)){
                    newboard[y][x]='>';
                }
                else if newblizzard.contains(&(x,y,1)){
                    newboard[y][x]='v';
                }
                else if newblizzard.contains(&(x,y,2)){
                    newboard[y][x]='<';
                }
                else if newblizzard.contains(&(x,y,3)){
                    newboard[y][x]='^';
                }
                else{
                    newboard[y][x]='.';
                }
            }
        }
    }
    (newboard,newblizzard)
}

fn cachecycle(board:&Vec<Vec<char>>,blizzard:&HashSet<(usize,usize,i32)>,cyclesnum:i32)->Vec<Vec<Vec<char>>>{
    let mut cycles=Vec::new();
    let mut newboard=board.to_vec();
    let mut newset=blizzard.clone();
    cycles.push(board.to_vec());
    for _ in 1..cyclesnum{
        let help=nextphase(&newboard, &newset);
        newboard=help.0;
        newset=help.1;
        cycles.push(newboard.to_vec());
    }
    cycles
}

fn lcm(first: i32, second: i32) -> i32 {
    first * second / gcd(first, second)
}

fn gcd(first: i32, second: i32) -> i32 {
    let mut max = first;
    let mut min = second;
    if min > max {
        let val = max;
        max = min;
        min = val;
    }
    loop {
        let res = max % min;
        if res == 0 {
            return min;
        }
        max = min;
        min = res;
    }
}

fn main() {
    let file = File::open("data.txt").unwrap();
    let reader = BufReader::new(file);
    let mut width=0;
    let mut height=0;
    for lines in reader.lines(){
        let mut help="".to_string();
        match lines{
            Ok(a)=>help=a.to_string(),
            _=>()
        }
        width=help.len();
        height+=1;
    }
    println!("{},{}",width,height);
    let mut board=vec![vec!['.';width];height];
    let file = File::open("data.txt").unwrap();
    let reader = BufReader::new(file);
    let mut y=0;
    let mut blizzard=HashSet::new();
    for lines in reader.lines(){
        let mut help="".to_string();
        match lines{
            Ok(a)=>help=a.to_string(),
            _=>()
        }
        let mut x=0;
        for c in help.chars(){
            match c {
                '>'=>blizzard.insert((x,y,0)),
                'v'=>blizzard.insert((x,y,1)),
                '<'=>blizzard.insert((x,y,2)),
                '^'=>blizzard.insert((x,y,3)),
                _=>false
            };
            board[y][x]=c;
            x+=1;
        }
        y+=1;
    }
    let cyclelen=lcm(width as i32 -2,height as i32 -2);
    let cycles=cachecycle(&board, &blizzard, cyclelen);
    for board in cycles{
        println!("NEW BOARD");
        for row in board{
            println!("{:?}",row);
        }
    }
}
